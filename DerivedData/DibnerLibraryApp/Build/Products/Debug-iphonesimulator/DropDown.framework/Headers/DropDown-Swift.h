// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
@class UIFont;
@class NSCoder;


/// A Material Design drop down in replacement for UIPickerView.
SWIFT_CLASS("_TtC8DropDown8DropDown")
@interface DropDown : UIView

/// The current visible drop down. There can be only one visible drop down at a time.
+ (DropDown * _Nullable)VisibleDropDown;
+ (void)setVisibleDropDown:(DropDown * _Nullable)value;

/// The view to which the drop down will displayed onto.
@property (nonatomic, weak) UIView * _Nullable anchorView;

/// The offset point relative to anchorView when the drop down is shown above the anchor view.
///
/// By default, the drop down is showed onto the <code>anchorView
/// </code> with the top
/// left corner for its origin, so an offset equal to (0, 0).
/// You can change here the default drop down origin.
@property (nonatomic) CGPoint topOffset;

/// The offset point relative to anchorView when the drop down is shown below the anchor view.
///
/// By default, the drop down is showed onto the <code>anchorView
/// </code> with the top
/// left corner for its origin, so an offset equal to (0, 0).
/// You can change here the default drop down origin.
@property (nonatomic) CGPoint bottomOffset;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// The background color of the selected cell in the drop down.
///
/// Changing the background color automatically reloads the drop down.
@property (nonatomic, strong) UIColor * _Nonnull selectionBackgroundColor;

/// The color of the text for each cells of the drop down.
///
/// Changing the text color automatically reloads the drop down.
@property (nonatomic, strong) UIColor * _Nonnull textColor;

/// The font of the text for each cells of the drop down.
///
/// Changing the text font automatically reloads the drop down.
@property (nonatomic, strong) UIFont * _Nonnull textFont;

/// The data source for the drop down.
///
/// Changing the data source automatically reloads the drop down.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull dataSource;

/// The localization keys for the data source for the drop down.
///
/// Changing this value automatically reloads the drop down.
/// This has uses for setting accibility identifiers on the drop down cells (same ones as the localization keys).
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull localizationKeysDataSource;

/// The format for the cells' text.
///
/// By default, the cell's text takes the plain <code>dataSource
/// </code> value.
/// Changing <code>cellConfiguration
/// </code> automatically reloads the drop down.
@property (nonatomic, copy) NSString * _Nonnull (^ _Nullable cellConfiguration)(NSInteger, NSString * _Nonnull);

/// The action to execute when the user selects a cell.
@property (nonatomic, copy) void (^ _Nullable selectionAction)(NSInteger, NSString * _Nonnull);

/// The action to execute when the drop down will show.
@property (nonatomic, copy) void (^ _Nullable willShowAction)(void);

/// The action to execute when the user cancels/hides the drop down.
@property (nonatomic, copy) void (^ _Nullable cancelAction)(void);

/// Creates a new instance of a drop down. Don't forget to setup the dataSource, the anchorView and the selectionAction at least before calling show().
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIEvent;

@interface DropDown (SWIFT_EXTENSION(DropDown))
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
@end


@interface DropDown (SWIFT_EXTENSION(DropDown))
@end


@interface DropDown (SWIFT_EXTENSION(DropDown))

/// Starts listening to keyboard events. Allows the drop down to display correctly when keyboard is showed.
+ (void)startListeningToKeyboard;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface DropDown (SWIFT_EXTENSION(DropDown)) <UITableViewDataSource, UITableViewDelegate, UIScrollViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface DropDown (SWIFT_EXTENSION(DropDown))

/// Hides the drop down.
- (void)hide;
@end


@interface DropDown (SWIFT_EXTENSION(DropDown))
- (void)updateConstraints;
- (void)layoutSubviews;
@end


@interface DropDown (SWIFT_EXTENSION(DropDown))

/// Reloads all the cells.
///
/// It should not be necessary in most cases because each change to
/// <code>dataSource
/// </code>, <code>textColor
/// </code>, <code>textFont
/// </code>, <code>selectionBackgroundColor
/// </code>
/// and <code>cellConfiguration
/// </code> implicitly calls <code>reloadAllComponents()
/// </code>.
- (void)reloadAllComponents;

/// Returns the selected item.
@property (nonatomic, readonly, copy) NSString * _Nullable selectedItem;
@end


@interface UIView (SWIFT_EXTENSION(DropDown))
@end


@interface UIView (SWIFT_EXTENSION(DropDown))
@end


@interface UIWindow (SWIFT_EXTENSION(DropDown))
@end

#pragma clang diagnostic pop
